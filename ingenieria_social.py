# -*- coding: utf-8 -*-
"""Ingenieria Social.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nSW2tGdGHMgxNFrDDtJA9vZNpMW83Nrb
"""

#5.1. Phishing (Python) - Código Python para Simulación de Ataque de Phishing
import smtplib
from email.mime.text import MIMEText

def send_phishing_email(target_email, phishing_link):
    sender_email = "fake.sender@gmail.com"
    subject = "Verificación de Cuenta"
    body = f"Estimado usuario, por favor haga clic en el siguiente enlace para verificar su cuenta: {phishing_link}"

    message = MIMEText(body)
    message["Subject"] = subject
    message["From"] = sender_email
    message["To"] = target_email

    with smtplib.SMTP("smtp.gmail.com", 587) as server:
        server.starttls()
        server.login(sender_email, "fakepassword")
        server.sendmail(sender_email, target_email, message.as_string())

# Uso de la función
send_phishing_email("victim@example.com", "http://fake-phishing-site.com")

#Explicación:
#Este código Python utiliza la biblioteca smtplib para enviar un correo electrónico simulado de phishing.
#Se crea un correo electrónico falso que parece provenir de un remitente confiable, pero contiene un enlace de phishing.

#5.2. Spear Phishing (Python) - Código Python para Simulación de Ataque de Spear Phishing
import smtplib
from email.mime.text import MIMEText

def send_spear_phishing_email(target_email, target_name, malicious_attachment):
    sender_email = "fake.colleague@gmail.com"
    subject = f"Reunión Importante, {target_name} - Adjunto Importante"
    body = f"Estimado {target_name}, por favor encuentra adjunto el documento importante discutido en nuestra reunión."

    message = MIMEText(body)
    message["Subject"] = subject
    message["From"] = sender_email
    message["To"] = target_email

    # Adjuntar el malware (simulado)
    message.attach(MIMEText(malicious_attachment, "plain"))

    with smtplib.SMTP("smtp.gmail.com", 587) as server:
        server.starttls()
        server.login(sender_email, "fakepassword")
        server.sendmail(sender_email, target_email, message.as_string())

# Uso de la función
send_spear_phishing_email("executive@example.com", "John Doe", "¡Malware adjunto!")
#Explicación:
#Este código Python simula un ataque de spear phishing enviando un correo electrónico personalizado a un individuo específico.
#El correo electrónico falso incluye un archivo adjunto malicioso.

#5.3. Vishing (Python) - Código Python para Simulación de Ataque de Vishing
from twilio.rest import Client

def make_vishing_call(phone_number, vishing_message):
    account_sid = 'your_account_sid'
    auth_token = 'your_auth_token'
    from_phone_number = 'your_twilio_phone_number'

    client = Client(account_sid, auth_token)

    call = client.calls.create(
        url='http://twimlets.com/message?Message%5B0%5D=' + vishing_message,
        to=phone_number,
        from_=from_phone_number
    )

# Uso de la función
make_vishing_call("+1234567890", "Hola, esto es un mensaje de seguridad. Su cuenta ha experimentado actividad sospechosa.")

#Explicación:
#Este código utiliza la biblioteca twilio para simular un ataque de vishing realizando una llamada telefónica automatizada.
#La llamada contiene un mensaje de vishing diseñado para engañar a la víctima.