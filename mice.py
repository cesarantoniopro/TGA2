# -*- coding: utf-8 -*-
"""MICE.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wucRo8J3pkg3HAA6yG8oK4YsbgUzQmwk
"""

#5.1.1. MICE (Motivaciones, Incentivos, Consecuencias, Excusas)
#Ejemplo de Código en Python (para fines educativos)

# Simulación de un ataque de ransomware con motivación financiera
def ataque_ransomware():
    archivos_cifrados = cifrar_archivos()
    rescate = solicitar_rescate()

    if rescate:
        descifrar_archivos(rescate)
        print("Archivos descifrados. Pago recibido.")
    else:
        print("No se recibió el rescate. Archivos permanecen cifrados.")

def cifrar_archivos():
    # Lógica de cifrado de archivos
    pass

def solicitar_rescate():
    # Simular la solicitud de rescate al objetivo
    rescate = input("Ingrese el monto del rescate (en bitcoins): ")
    return rescate

def descifrar_archivos(rescate):
    # Lógica para descifrar archivos después de recibir el rescate
    pass

# Ejecutar el ataque
ataque_ransomware()

#Explicación:
#Este código Python simula un ataque de ransomware, que es un ejemplo de motivación financiera.
#El atacante cifra archivos y exige un rescate en bitcoins para descifrarlos.
#La función solicitar_rescate() simula la interacción con la víctima para exigir el pago.

#5.1.2. Tipología de Motivaciones
#Ejemplo de Código en Python (para fines educativos):

# Simulación de un ataque hacktivista con motivación ideológica
def ataque_hacktivista():
    seleccionar_objetivo()
    realizar_ataque()

def seleccionar_objetivo():
    # Lógica para seleccionar un objetivo basado en motivaciones ideológicas
    pass

def realizar_ataque():
    # Lógica para llevar a cabo el ataque hacktivista
    pass

# Ejecutar el ataque
ataque_hacktivista()

#Explicación:
#Este código Python simula un ataque hacktivista, que es un ejemplo de motivación ideológica.
#La función seleccionar_objetivo() simula la selección de un objetivo basado en motivaciones ideológicas,
#y realizar_ataque() ejecuta el ataque contra ese objetivo.

import hashlib

def check_password_hash(password, hash):
    return hashlib.sha256(password.encode()).hexdigest() == hash

# Supongamos que tenemos una contraseña y su hash
password = "password123"
hash = "6dcd4ce23d88e2ee95838f7b014b6284f490b71d"

print(check_password_hash(password, hash))

#Este script de Python utiliza la biblioteca hashlib para comprobar si el hash de una contraseña dada
#coincide con un hash almacenado. Si la función check_password_hash devuelve True, entonces la contraseña es correcta.